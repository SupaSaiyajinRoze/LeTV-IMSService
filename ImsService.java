/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.mediatek.ims;

import com.mediatek.wfo.IWifiOffloadListener;
import android.telephony.Rlog;
import android.os.IBinder;
import com.mediatek.wfo.IWifiOffloadService;
import android.os.Handler;
import android.os.Message;
import com.android.ims.internal.IImsService;
import android.content.BroadcastReceiver;
import android.content.Context;
import java.util.Map;
import com.android.ims.internal.IImsConfig;
import com.android.ims.internal.IImsRegistrationListener;
import com.android.ims.internal.IImsCallSession;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.content.Intent;
import android.os.SystemProperties;
import com.android.ims.ImsReasonInfo;
import com.mediatek.wfo.DisconnectCause;
import android.os.AsyncResult;
import com.android.ims.ImsCallProfile;
import com.android.ims.internal.IImsCallSessionListener;
import android.telephony.SubscriptionManager;
import com.mediatek.internal.telephony.RadioCapabilitySwitchUtil;
import com.android.ims.internal.IImsEcbm;
import com.android.ims.internal.IImsUt;
import android.app.PendingIntent;

public class ImsService extends IImsService.Stub {
    private static final boolean DBG = true;
    protected static final int EVENT_CALL_INFO_INDICATION = 0x8;
    protected static final int EVENT_CALL_RING = 0x9;
    protected static final int EVENT_IMS_DISABLED_URC = 0x5;
    protected static final int EVENT_IMS_DISABLING_URC = 0xc;
    protected static final int EVENT_IMS_ENABLED_URC = 0xb;
    protected static final int EVENT_IMS_ENABLING_URC = 0xa;
    private static final int EVENT_IMS_REGISTRATION_INFO = 0x1;
    protected static final int EVENT_INCOMING_CALL_INDICATION = 0x7;
    protected static final int EVENT_RADIO_NOT_AVAILABLE = 0x2;
    protected static final int EVENT_SET_IMS_DISABLE_DONE = 0x4;
    protected static final int EVENT_SET_IMS_ENABLED_DONE = 0x3;
    protected static final int EVENT_SIP_CODE_INDICATION = 0xd;
    private static final int EVENT_VIRTUAL_SIM_ON = 0x6;
    private static final int IMS_ALLOW_INCOMING_CALL_INDICATION = 0x0;
    private static final int IMS_DISALLOW_INCOMING_CALL_INDICATION = 0x1;
    private static final int IMS_MAX_FEATURE_SUPPORT_SIZE = 0x4;
    private static final int IMS_RCS_OVER_LTE = 0x2;
    private static final int IMS_SMS_OVER_LTE = 0x4;
    private static final int IMS_VIDEO_OVER_LTE = 0x8;
    private static final int IMS_VOICE_OVER_LTE = 0x1;
    private static final int IMS_VOICE_OVER_WIFI = 0x10;
    private static final String LOG_TAG = "ImsService";
    private static final boolean VDBG;
    private int mActivePhoneId;
    private final BroadcastReceiver mBroadcastReceiver;
    private Context mContext;
    private ImsService.IWifiOffloadServiceDeathRecipient mDeathRecipient;
    private final Handler mHandler;
    private ImsAdapter mImsAdapter;
    private Map<Integer, IImsConfig> mImsConfigInstanceMap<Integer, IImsConfig>;
    private int mImsExtInfo;
    private ImsRILAdapter mImsRILAdapter;
    private int mImsRegInfo;
    private boolean mImsRegistry;
    private int mImsState;
    private IImsRegistrationListener mListener;
    private ImsNotificationController mNotificationController;
    private IImsCallSession mPendingMT;
    private int mRAN;
    private int mRegErrorCode;
    private int mServiceId;
    private static IWifiOffloadService sWifiOffloadService = 0x0;
    
    static {
    }
    private static ImsConfigStub sImsConfig = 0x0;
    private static ImsUtStub sImsUtStub = 0x0;
    
    public void enableImsAdapter() {
        return;
        mImsAdapter.enableImsAdapter();
    }
    
    public void disableImsAdapter(boolean isNormalDisable) {
        return;
        mImsAdapter.disableImsAdapter(isNormalDisable);
        mImsState = 0x0;
    }
    
    public boolean isConnected(int serviceId, int serviceType, int callType) {
        return mImsAdapter.getImsAdapterEnable();
    }
    
    public int open(int phoneId, int serviceClass, PendingIntent incomingCallIntent, IImsRegistrationListener listener) {
        if(mListener != null) {
            Rlog.e("ImsService", "IMS: it did not close IMS servide before open() !!");
        }
        setRegistrationListener(0x1, listener);
        return 0x1;
    }
    
    public void close(int serviceId) {
        return;
        mListener = 0x0;
    }
    
    public boolean isOpened(int serviceId) {
        return mImsAdapter.getImsAdapterEnable();
    }
    
    public void turnOnIms(int phoneId) {
        return;
        Rlog.d("ImsService", "turnOnIms, mActivePhoneId = " + mActivePhoneId + mActivePhoneId + phoneId);
        String localString1 = " phoneId = ";
        phoneId = RadioCapabilitySwitchUtil.getMainCapabilityPhoneId();
        Rlog.d("ImsService", "turnOnIms, MainCapabilityPhoneId = " + phoneId);
        boolean isPhoneIdChanged = 0x0;
        if(mActivePhoneId != phoneId) {
            mActivePhoneId = phoneId;
            isPhoneIdChanged = true;
        }
        mImsRILAdapter.turnOnIms(mHandler.obtainMessage(0x3));
        mImsState = 0x2;
    }
    
    public void turnOffIms(int phoneId) {
        return;
        Rlog.d("ImsService", "turnOffIms, mActivePhoneId = " + mActivePhoneId + mActivePhoneId + phoneId);
        String localString1 = " phoneId = ";
        phoneId = RadioCapabilitySwitchUtil.getMainCapabilityPhoneId();
        Rlog.d("ImsService", "turnOffIms, MainCapabilityPhoneId = " + phoneId);
        boolean isPhoneIdChanged = 0x0;
        if(mActivePhoneId != phoneId) {
            mActivePhoneId = phoneId;
            isPhoneIdChanged = true;
        }
        mImsRILAdapter.turnOffIms(mHandler.obtainMessage(0x4));
        mImsState = 0x3;
    }
    
    public void setRegistrationListener(int serviceId, IImsRegistrationListener listener) {
        return;
        mListener = listener;
        if(mImsRegInfo != 0x3) {
            notifyRegistrationStateChange(mImsRegInfo);
        }
        if(mImsRegInfo == 0) {
            notifyRegistrationCapabilityChange(mImsExtInfo);
        }
        // Parsing error may occure here :(
    }
    
    public ImsCallProfile createCallProfile(int serviceId, int serviceType, int callType) {
        return new ImsCallProfile(serviceType, callType);
    }
    
    public IImsCallSession createCallSession(int serviceId, ImsCallProfile profile, IImsCallSessionListener listener) {
        return new ImsCallSessionProxy(mContext, this, listener, this, mHandler, mImsRILAdapter);
    }
    
    public IImsCallSession getPendingCallSession(int serviceId, String callId) {
        // :( Parsing error. Please contact me.
    }
    
    public IImsUt getUtInterface(int serviceId) {
        if(sImsUtStub == null) {
            sImsUtStub = new ImsUtStub(mContext);
        }
        return sImsUtStub;
    }
    
    public IImsConfig getConfigInterface(int phoneId) {
        if(!SubscriptionManager.isValidPhoneId(phoneId)) {
            Rlog.w("ImsService", "Invalid phoneId " + phoneId + " to get config interface");
            phoneId = RadioCapabilitySwitchUtil.getMainCapabilityPhoneId();
            Rlog.w("ImsService", "Get config interface on main capability phone " + phoneId);
        }
        IImsConfig instance = 0x0;
        Rlog.w("ImsService", "getConfigInterface phone " + phoneId);
        synchronized(mImsConfigInstanceMap) {
            if(mImsConfigInstanceMap.containsKey(Integer.valueOf(phoneId))) {
                Rlog.w("ImsService", "A");
            }
            instance = (IImsConfig)mImsConfigInstanceMap.get(Integer.valueOf(phoneId));
        }
        Rlog.w("ImsService", "B");
        ImsConfigStub instance = new ImsConfigStub(mContext, mImsRILAdapter, phoneId);
        mImsConfigInstanceMap.put(Integer.valueOf(phoneId), instance);
        return instance;
    }
    
    public IImsEcbm getEcbmInterface(int serviceId) {
        return new ImsEcbmProxy();
    }
    
    public void setUiTTYMode(int serviceId, int uiTtyMode, Message onComplete) {
    }
    
    public void setCallIndication(String callId, String callNum, int seqNum, boolean isAllow) {
        // :( Parsing error. Please contact me.
    }
    
    public int getImsState() {
        return mImsState;
    }
    
    public boolean getImsRegInfo(int phoneId) {
        if(phoneId != mActivePhoneId) {
            Rlog.d("ImsService", "IMS: getImsRegInfo() phoneId = " + phoneId + "IMS: getImsRegInfo() phoneId = " + "IMS: getImsRegInfo() phoneId = ");
            String localString1 = mActivePhoneId;
            return false;
        }
        if(mImsRegInfo == 0) {
            return mImsRegInfo;
            return true;
        }
        return false;
    }
    
    public String getImsExtInfo() {
        return Integer.toHexString(mImsExtInfo);
    }
    
    public int getImsServiceState() {
        return mImsRegInfo;
    }
    
    public void hangupAllCall() {
        return;
        mImsRILAdapter.hangupAllCall(0x0);
    }
    
    private void sendIncomingCallIndication(AsyncResult ar) {
        return;
        String callId = (String[])ar.result[0x0];
        String dialString = (String[])ar.result[0x1];
        String callMode = (String[])ar.result[0x3];
        String seqNum = (String[])ar.result[0x4];
        int serviceId = 0x1;
        Rlog.d("ImsService", "IMS: sendIncomingCallIndication() call_id = " + callId + "IMS: sendIncomingCallIndication() call_id = " + dialString + "IMS: sendIncomingCallIndication() call_id = " + seqNum);
        Intent intent = new Intent("com.android.ims.IMS_INCOMING_CALL_INDICATION");
        intent.putExtra("android:imsCallID", callId);
        intent.putExtra("android:imsDialString", dialString);
        intent.putExtra("android:imsCallMode", Integer.parseInt(callMode));
        intent.putExtra("android:imsSeqNum", Integer.parseInt(seqNum));
        intent.putExtra("android:imsServiceId", serviceId);
        mContext.sendBroadcast(intent);
    }
    
    private ImsService.IWifiOffloadListenerProxy createWifiOffloadListenerProxy() {
        ImsService.IWifiOffloadListenerProxy proxy = new ImsService.IWifiOffloadListenerProxy(this, 0x0);
        return proxy;
    }
    
    class IWifiOffloadListenerProxy extends IWifiOffloadListener.Stub {
        
        synthetic IWifiOffloadListenerProxy(ImsService this$0, ImsService.IWifiOffloadListenerProxy p2);
        
        
        public void onHandover(int stage, int ratType) {
            return;
            Rlog.d("ImsService", "onHandover");
            -set4(this$0, ratType);
            if(stage == 0x1) {
                if(-get6(this$0) == 0) {
                    -wrap4(this$0, -get4(this$0));
                }
                // Parsing error may occure here :(
            }
            // Parsing error may occure here :(
        }
    }
    
    public ImsRILAdapter getImsRILAdapter() {
        if(mImsRILAdapter == null) {
            Rlog.d("ImsService", "IMS: getImsRILAdapter, mImsRILAdapter is null ");
        }
        return mImsRILAdapter;
    }
    
    private void checkAndBindWifiOffloadService() {
        return;
        IBinder b = ServiceManager.getService("wfo");
        if(b != null) {
            try {
                b.linkToDeath(mDeathRecipient, 0x0);
            } catch(RemoteException e) {
            }
        }
        sWifiOffloadService = IWifiOffloadService.Stub.asInterface(b);
        Rlog.d("ImsService", "checkAndBindWifiOffloadService: sWifiOffloadService = " + "checkAndBindWifiOffloadService: sWifiOffloadService = ");
    }
    
    class IWifiOffloadServiceDeathRecipient implements IBinder.DeathRecipient {
        
        synthetic IWifiOffloadServiceDeathRecipient(ImsService this$0, ImsService.IWifiOffloadServiceDeathRecipient p2);
        
        
        public void binderDied() {
            return;
            -set6(0x0);
        }
    }
    
    private void notifyRegistrationStateChange(int imsRegInfo) {
        return;
        if(mListener == null) {
            return;
            return;
        }
        Rlog.d("ImsService", "IMS: notifyRegistrationStateChange imsRegInfo= " + imsRegInfo);
        if(imsRegInfo == 0) {
            try {
                mListener.registrationConnected();
                if(sWifiOffloadService == null) {
                    checkAndBindWifiOffloadService();
                }
                if(sWifiOffloadService != null) {
                    try {
                        sWifiOffloadService.registerForHandoverEvent("IMS: notifyRegistrationStateChange imsRegInfo= " + imsRegInfo);
                        localString1 = createWifiOffloadListenerProxy();
                    } catch(RemoteException e) {
                        Rlog.e("ImsService", "can\'t register handover event");
                    } else {
                        Rlog.e("ImsService", "can\'t get WifiOffloadService");
                    }
                }
                if(sWifiOffloadService != null) {
                    mRAN = sWifiOffloadService.getRatType();
                }
                mRegErrorCode = 0x0;
                return;
            } catch(RemoteException e) {
                Rlog.e("ImsService", "IMS: notifyStateChange fail on access WifiOffloadService");
            }
            ImsReasonInfo imsReasonInfo = 0x0;
            try {
                if(sWifiOffloadService != null) {
                    if(sWifiOffloadService.getRatType() == 0x2) {
                        DisconnectCause wifiDisconnectCause = sWifiOffloadService.getDisconnectCause();
                        int wifiErrorCode = wifiDisconnectCause.getErrorCause();
                        ImsReasonInfo imsReasonInfo = new ImsReasonInfo(0x3e8, wifiErrorCode, sWifiOffloadService);
                        sWifiOffloadService = Integer.toString(wifiErrorCode);
                    }
                } else {
                    ImsReasonInfo imsReasonInfo = new ImsReasonInfo(0x3e8, sWifiOffloadService, "IMS: notifyRegistrationStateChange imsRegInfo= " + imsRegInfo);
                    mRegErrorCode = Integer.toString(mRegErrorCode);
                }
            }
            mListener.registrationDisconnected(imsReasonInfo);
        } catch(RemoteException e) {
        }
        // Parsing error may occure here :(
    }
    
    private void notifyRegistrationCapabilityChange(int imsExtInfo) {
        // :( Parsing error. Please contact me.
    }
    
    class MyHandler extends Handler {
        
        synthetic MyHandler(ImsService this$0, ImsService.MyHandler p2);
        
        
        public void handleMessage(Message msg) {
            // :( Parsing error. Please contact me.
        }
    }
    
    public int getRegistrationStatus() {
        if(mNotificationController == null) {
            return 0x64;
        }
        return mNotificationController.getRegistrationStatus();
    }
    
    private static boolean isTestSim(int phoneId) {
        boolean isTestSim = 0x0;
        switch(phoneId) {
            case 0:
            {
                return isTestSim;
            }
            case 1:
            {
                return isTestSim;
            }
            case 2:
            {
                return isTestSim;
            }
            case 3:
            {
                isTestSim = "1".equals(SystemProperties.get("gsm.sim.ril.testsim.4", "0"));
                break;
            }
        }
        return isTestSim;
    }
    
    private void disableIms(boolean isNormalDisable) {
        return;
        mContext.sendBroadcast(new Intent("com.android.ims.IMS_SERVICE_DOWN"));
        disableImsAdapter(isNormalDisable);
    }
}
